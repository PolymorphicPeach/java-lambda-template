<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>dagger-learning</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <aws.java.sdk.version>2.25.50</aws.java.sdk.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!-- AWS SDK dependency has to go in this dependencyManagement section...? -->
    <!-- https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/setup-project-maven.html -->
    <dependencyManagement>
        <dependencies>
            <!-- AWS SDK dependency -->
            <!-- https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/setup-project-maven.html -->
            <dependency>
                <groupId>software.amazon.awssdk</groupId>
                <artifactId>bom</artifactId>
                <version>2.25.50</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- AWS SDK module dependencies can go in here with the others -->
        <!-- https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/setup-project-maven.html -->

        <!-- Required for writing Lambda code in Java -->
        <!-- https://stackoverflow.com/questions/54372687/aws-lambda-handlers-in-java-the-package-is-unavailable -->
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-core</artifactId>
            <version>1.2.3</version>
        </dependency>

        <!-- "Minimize the complexity of your dependencies. Prefer simpler frameworks that load quickly
        on execution environment startup. For example, prefer simpler Java dependency injection (IoC) frameworks
        like Dagger or Guice, over more complex ones like Spring Framework." -->
        <!-- https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html -->
        <dependency>
            <groupId>com.google.dagger</groupId>
            <artifactId>dagger</artifactId>
            <version>2.16</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!-- Maven compiler required to use AWS SDK for Java -->
            <!-- https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/setup-project-maven.html -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>com.google.dagger</groupId>
                            <artifactId>dagger-compiler</artifactId>
                            <version>2.16</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!-- Maven Shade plugin recommended by AWS for packaging Lambdas -->
            <!-- https://docs.aws.amazon.com/lambda/latest/dg/java-package.html -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <createDependencyReducedPom>false</createDependencyReducedPom>
                    <!-- filters/transformers required to resolve Maven Shade plugin warning about multiple META-INF/MANIFEST.MF -->
                    <!-- https://stackoverflow.com/questions/64110058/maven-shade-plugin-how-resolve-the-warning-message-define-1-overlapping-resour -->
                    <filters>
                        <filter>
                            <artifact>*.*</artifact>
                            <excludes>
                                <exclude>module-info.class</exclude>
                                <exclude>META-INF/MANIFEST.MF</exclude>
                            </excludes>
                        </filter>
                    </filters>
                    <transformers>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer" />
                    </transformers>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>